spring.application.name=student-service
server.port: 8080
server.servlet.context-path: /api/rest

# PostgreSQL Configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/studentDB
spring.datasource.username=root
spring.datasource.password=root@123
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate Properties
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

#spring.datasource.url=jdbc:h2:mem:studentDB
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=sa@1234
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Redis Configuration
spring.redis.host=localhost
spring.redis.port=6379
spring.redis.timeout=60000
spring.redis.lettuce.pool.max-active=8
spring.redis.lettuce.pool.max-wait=-1
spring.redis.lettuce.pool.max-idle=8
spring.redis.lettuce.pool.min-idle=8

# Cache Configuration
spring.cache.type=redis
spring.cache.redis.time-to-live=30000
spring.cache.redis.cache-null-values=false




# Testing
# http://localhost:8088/api/rest/student/getbyid?id=1001&age=38
# http://localhost:8088/api/rest/student/getbyname/Rajib Kumer Ghosh
# POST http://localhost:8080/api/rest/student/createstudent
# {
# "id":"1",
# "name": "Rajib Kumer Ghosh",
# "age": 35
# }

# PUT http://localhost:8080/api/rest/student/updatestudent
# {
# "id":"1",
# "name": "Rajib Kumer Ghosh",
# "age": 38
# }

# PATCH http://localhost:8080/api/rest/student/updatestudentage/1001
# {
# "age": 39
# }

# PATCH http://localhost:8080/api/rest/student/updatestudentpartial/1001
# {
# "name": "Rajib Kumer Ghosh",
# "age": 39
# }

# DELETE http://localhost:8080/api/rest/student/deletestudent
# {
# "id":"1",
# "name": "Rajib Kumer Ghosh",
# "age": 39
# }

# Create a Student
# curl -X POST "http://localhost:8080/student" -H "Content-Type: application/json" -d '{"name": "Rajib Kumer Ghosh", "age": 22}'

# Get All Students
# curl -X GET "http://localhost:8080/student"

# Get Student by ID
# curl -X GET "http://localhost:8080/student/1"

# Delete Student
# curl -X DELETE "http://localhost:8080/student/1"


# GitHub
# Create a new Repository in GitHub with name =
# git init
# git add .
# git commit -m "Initial commit"
# git remote add origin <remote-repository-URL>
# git remote add origin https://github.com/rajhimaloy/student-service.git
# git branch -M main  # Rename the branch to 'main' (optional)
# git push -u origin main
# git push -u origin main --force
# OR
# git pull --rebase origin main
# git add .
# git rebase --continue
# git push -u origin main

# To add new file and modified file to remote(GitHub) existing Repository (Default Main Branch)
# git pull
# git add docker-compose-jenkins.yaml
# git add Dockerfile
# git add Jenkinsfile
# git commit -a -m "Docker Jenkins added"
# git push

# To verify that your files are added and committed, run:
# git status    # Check untracked/modified files
# git log       # View commit history
# git remote -v # Check remote repository
# git remote 	# Check remote repository branch